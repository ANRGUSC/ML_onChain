/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MLP_2L_1nInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "biases"
      | "classify"
      | "correct_Count"
      | "relu"
      | "set_Biases"
      | "set_TrainingData"
      | "set_Weights"
      | "sigmoid"
      | "sigmoid2"
      | "training_data"
      | "view_dataset_size"
      | "weights_layer1"
      | "weights_layer2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "biases",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "classify", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "correct_Count",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "relu", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "set_Biases",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "set_TrainingData",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "set_Weights",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmoid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sigmoid2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "training_data",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "view_dataset_size",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weights_layer1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "weights_layer2",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "biases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "classify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correct_Count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relu", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_Biases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_TrainingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_Weights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sigmoid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sigmoid2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "training_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "view_dataset_size",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weights_layer1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weights_layer2",
    data: BytesLike
  ): Result;
}

export interface MLP_2L_1n extends BaseContract {
  connect(runner?: ContractRunner | null): MLP_2L_1n;
  waitForDeployment(): Promise<this>;

  interface: MLP_2L_1nInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  biases: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  classify: TypedContractMethod<[], [bigint], "view">;

  correct_Count: TypedContractMethod<[], [bigint], "view">;

  relu: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  set_Biases: TypedContractMethod<
    [layer: BigNumberish, b: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  set_TrainingData: TypedContractMethod<
    [d: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  set_Weights: TypedContractMethod<
    [layer: BigNumberish, w: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  sigmoid: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  sigmoid2: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  training_data: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  view_dataset_size: TypedContractMethod<[], [bigint], "view">;

  weights_layer1: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  weights_layer2: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "biases"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "classify"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "correct_Count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "relu"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "set_Biases"
  ): TypedContractMethod<
    [layer: BigNumberish, b: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "set_TrainingData"
  ): TypedContractMethod<[d: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_Weights"
  ): TypedContractMethod<
    [layer: BigNumberish, w: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sigmoid"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "sigmoid2"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "training_data"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "view_dataset_size"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weights_layer1"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "weights_layer2"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}

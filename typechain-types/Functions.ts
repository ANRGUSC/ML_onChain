/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FunctionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "add_1"
      | "add_2"
      | "add_prb_1"
      | "add_prb_2"
      | "div_1"
      | "div_2"
      | "div_prb_1"
      | "div_prb_2"
      | "mul_1"
      | "mul_2"
      | "mul_prb_1"
      | "mul_prb_2"
      | "relu"
      | "sigmoid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_prb_1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_prb_2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div_1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div_2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div_prb_1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "div_prb_2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_prb_1",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul_prb_2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "relu", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sigmoid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_prb_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_prb_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div_prb_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "div_prb_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul_prb_1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul_prb_2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relu", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sigmoid", data: BytesLike): Result;
}

export interface Functions extends BaseContract {
  connect(runner?: ContractRunner | null): Functions;
  waitForDeployment(): Promise<this>;

  interface: FunctionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add_1: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  add_2: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  add_prb_1: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  add_prb_2: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  div_1: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  div_2: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  div_prb_1: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  div_prb_2: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  mul_1: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  mul_2: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  mul_prb_1: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  mul_prb_2: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [void],
    "view"
  >;

  relu: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  sigmoid: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add_1"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "add_2"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "add_prb_1"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "add_prb_2"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "div_1"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "div_2"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "div_prb_1"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "div_prb_2"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "mul_1"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "mul_2"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "mul_prb_1"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "mul_prb_2"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "relu"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "sigmoid"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  filters: {};
}
